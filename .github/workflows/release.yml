name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.0.0'
  push:
    tags:
      - 'v*'
env:
  GO_VERSION: '1.24'
  APP_NAME: 'aeron-imgman'
jobs:
  # Run comprehensive tests first
  comprehensive-test:
    uses: ./.github/workflows/comprehensive-test.yml
    secrets: inherit
  build:
    needs: comprehensive-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            suffix: ''
          - goos: linux
            goarch: arm64
            suffix: ''
          - goos: linux
            goarch: arm
            goarm: '7'
            suffix: ''
          # Windows builds
          - goos: windows
            goarch: amd64
            suffix: '.exe'
          - goos: windows
            goarch: arm64
            suffix: '.exe'
          # macOS builds
          - goos: darwin
            goarch: amd64
            suffix: ''
          - goos: darwin
            goarch: arm64
            suffix: ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        run: go mod download
      - name: Set version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION=${{ github.ref_name }}
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="v0.0.0-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Build binary
          go build \
            -ldflags="-s -w -X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.BuildTime=${BUILD_TIME}" \
            -o ${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}${{ matrix.suffix }} \
            .
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}
          path: ${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}${{ matrix.suffix }}
  docker:
    needs: comprehensive-test
    uses: ./.github/workflows/docker-publish.yml
    with:
      version: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.version }}
    secrets: inherit
    permissions:
      contents: read
      packages: write
      id-token: write
  release:
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION=${{ github.ref_name }}
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="v0.0.0-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: ${{ env.APP_NAME }}-*
          merge-multiple: true
      - name: Prepare release assets
        run: |
          ls -la ./artifacts/
      - name: Generate release notes
        run: "VERSION=\"${{ steps.version.outputs.version }}\"\ncat > RELEASE_NOTES.md << EOF\n## Downloads\n  #magic___^_^___line\nDownload het juiste bestand voor je platform en maak het uitvoerbaar met \\`chmod +x\\`.\n  #magic___^_^___line\n**Linux**: amd64, arm64, armv7  \n**Windows**: amd64, arm64  \n**macOS**: Intel (amd64), Apple Silicon (arm64)\n  #magic___^_^___line\nVoor installatie-instructies en gebruiksvoorbeelden, zie de [README](README.md).\nEOF\n  #magic___^_^___line\n"
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: ./artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
